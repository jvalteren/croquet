program "Speed"
breed Turtle (x, y, dx, dy, r, g, b, a)
breed Filler (x, y)
patch Field (nx, ny, r, g, b, a)

def clear(field) {
    field.r = 0.0;
    field.g = 0.0;
    field.b = 0.0;
    field.a = 0.0;
    field.nx = 0.0;
    field.ny = 0.0;
}

def setColor() {
  this.r = this.x / 256.0;
  this.g = this.y / 256.0;
  this.b = 0.0;
  this.a = 1.0;
}

def fillCircle(px, py, cx, cy, r, field) {
  var dx = this.x - cx;
  var dy = this.y - cy;
  var dr = sqrt(dx * dx + dy * dy);
  var sx = cx - px;
  var sy = cy - py;
  if (dr < r) {
    field.r = 0.2;
    field.g = 0.2;
    field.b = 0.8;
    field.a = 1.0;
    field.nx = dx / r + (sx / 4.0);
    field.ny = dy / r + (sy / 4.0);
  }
}

def bounce(field) {
  var nx = field.nx;
  var ny = field.ny;
  var dx = this.dx;
  var dy = this.dy - 0.01;
  var dot = dx * nx + dy * ny;
  var rx = dx;
  var ry = dy;

  if (dot < 0.0) {
    rx = dx - 2.0 * dot * nx;
    ry = dy - 2.0 * dot * ny;
  }

  var newX = this.x + dx;
  var newY = this.y + dy;

  if (newX < 0.0) {
    newX = -newX;
    rx = -rx * 0.9;
  }
  if (newX > u_resolution.x) {
    newX = u_resolution.x - (newX - u_resolution.x);
    rx = -rx * 0.9;
  }
  if (newY < 0.0) {
    newY = mod(newY, u_resolution.y);
    ry = -0.1;
  }
  if (newY > u_resolution.y) {
    newY = u_resolution.y - (newY - u_resolution.y);
    ry = -ry;
  }

  this.x = newX;
  this.y = newY;
  this.dx = rx;
  this.dy = ry;
}

static setup() {
  Filler.fillSpace("x", "y", width, height);
  Turtle.setCount(10000);
  Turtle.fillRandom("x", 0, 512);
  Turtle.fillRandom("y", 0, 512);
  Turtle.fillRandomDir("dx", "dy");
  Turtle.setColor();
  var prev = mousemove;
}

static loop() {
  Filler.clear(Field);
  Filler.fillCircle(prev.x, prev.y, mousemove.x, mousemove.y, 20, Field);
  Turtle.bounce(Field);
  Field.draw();
  Turtle.draw();
  prev = mousemove;
}
