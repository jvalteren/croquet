program "Back and Forth"

breed Turtle (x, y, dx, dy, r, g, b, a, origX, origY)
breed Filler (x, y)
patch Field (nx, ny, r, g, b, a)

def clear(field) {
  field.r = 0.0;
  field.g = 0.0;
  field.b = 0.0;
  field.a = 0.0;
  field.nx = 0.0;
  field.ny = 0.0;
}

def fillCircle(cx, cy, r, field) {
  var dx = this.x - cx;
  var dy = this.y - cy;
  var dr = sqrt(dx * dx + dy * dy);
  if (dr < r) {
    field.r = 0.2;
    field.g = 0.2;
    field.b = 0.8;
    field.a = 1.0;
    field.nx = dx / r;
    field.ny = dy / r;
  }
}

def remember() {
  this.origX = this.x;
  this.origY = this.y;
}

def fillD() {
  this.dx = 0.0;
  this.dy = 0.0;
}

def goIn() {
  var diffX = this.origX - this.x;
  var diffY = this.origY - this.y;
  this.x = this.x + (diffX * 0.04);
  this.y = this.y + (diffY * 0.02);
}

def bounce(field) {
  var nx = field.nx;
  var ny = field.ny;
  var dx = this.dx;
  var dy = this.dy - 0.01;
  var origV = sqrt(dx * dx + dy * dy);
  var dot = dx * nx + dy * ny;
  var rx = dx;
  var ry = dy;

  if (dot < 0.0) {
    rx = dx - 2.0 * dot * nx;
    ry = dy - 2.0 * dot * ny;
    var norm = sqrt(rx * rx + ry * ry);
    rx = rx / (norm / origV);
    ry = ry / (norm / origV);
  }

  var newX = this.x + dx;
  var newY = this.y + dy;

  if (newX < 0.0) {
    newX = -newX;
    rx = -rx * 0.9;
  }
  if (newX > u_resolution.x) {
    newX = u_resolution.x - (newX - u_resolution.x);
    rx = -rx * 0.9;
  }
  if (newY < 0.0) {
    newY = mod(newY, u_resolution.y);
    ry = -0.1;
  }
  if (newY > u_resolution.y) {
    newY = u_resolution.y - (newY - u_resolution.y);
    ry = -ry;
  }

  this.x = newX;
  this.y = newY;
  this.dx = rx;
  this.dy = ry;
}

static setup() {
  Filler.fillSpace("x", "y", 512, 512);
  Turtle.fillImage("x", "y", "r", "g", "b", "a", image);
  Turtle.remember();
  Turtle.fillD();
  var goOut = true;
}

static loop(env) {
  goOut = (floor(time / 10.0) % 2) == 0;

  Filler.clear(Field);
  Filler.fillCircle(mousemove.x, mousemove.y, 20, Field);
  if (goOut) {
    Turtle.bounce(Field);
  } else {
    Turtle.goIn();
  }
  Field.draw();
  Turtle.draw();
}
